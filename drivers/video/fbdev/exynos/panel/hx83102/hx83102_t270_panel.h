/*
 * linux/drivers/video/fbdev/exynos/panel/hx83102/hx83102_t270_panel.h
 *
 * Header file for HX83102 Dimming Driver
 *
 * Copyright (c) 2016 Samsung Electronics
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */

#ifndef __HX83102_T270_PANEL_H__
#define __HX83102_T270_PANEL_H__
#include "../panel_drv.h"
#include "hx83102.h"

#include "hx83102_t270_panel_dimming.h"
#include "hx83102_t270_panel_i2c.h"

#include "hx83102_t270_resol.h"

#undef __pn_name__
#define __pn_name__	t270

#undef __PN_NAME__
#define __PN_NAME__	T270

static struct seqinfo t270_seqtbl[MAX_PANEL_SEQ];


/* ===================================================================================== */
/* ============================= [HX83102 READ INFO TABLE] ============================= */
/* ===================================================================================== */
/* <READINFO TABLE> IS DEPENDENT ON LDI. IF YOU NEED, DEFINE PANEL's RESOURCE TABLE */


/* ===================================================================================== */
/* ============================= [HX83102 RESOURCE TABLE] ============================== */
/* ===================================================================================== */
/* <RESOURCE TABLE> IS DEPENDENT ON LDI. IF YOU NEED, DEFINE PANEL's RESOURCE TABLE */


/* ===================================================================================== */
/* ============================== [HX83102 MAPPING TABLE] ============================== */
/* ===================================================================================== */

static u8 t270_brt_table[HX83102_TOTAL_NR_LUMINANCE][2] = {
	{0x00, 0x00},
	{0x00, 0x00},
	{0x00, 0x00},
	{0x00, 0x1D}, /* MIN */
	{0x00, 0x28},
	{0x00, 0x33},
	{0x00, 0x3F},
	{0x00, 0x4A},
	{0x00, 0x56},
	{0x00, 0x61},
	{0x00, 0x6C},
	{0x00, 0x78},
	{0x00, 0x83},
	{0x00, 0x8F},
	{0x00, 0x9A},
	{0x00, 0xA5},
	{0x00, 0xB1},
	{0x00, 0xBC},
	{0x00, 0xC8},
	{0x00, 0xD3},
	{0x00, 0xDF},
	{0x00, 0xEA},
	{0x00, 0xF5},
	{0x01, 0x01},
	{0x01, 0x0C},
	{0x01, 0x18},
	{0x01, 0x23},
	{0x01, 0x2E},
	{0x01, 0x3A},
	{0x01, 0x45},
	{0x01, 0x51},
	{0x01, 0x5C},
	{0x01, 0x67},
	{0x01, 0x73},
	{0x01, 0x7E},
	{0x01, 0x8A},
	{0x01, 0x95},
	{0x01, 0xA1},
	{0x01, 0xAC},
	{0x01, 0xB7},
	{0x01, 0xC3},
	{0x01, 0xCE},
	{0x01, 0xDA},
	{0x01, 0xE5},
	{0x01, 0xF0},
	{0x01, 0xFC},
	{0x02, 0x07},
	{0x02, 0x13},
	{0x02, 0x1E},
	{0x02, 0x29},
	{0x02, 0x35},
	{0x02, 0x40},
	{0x02, 0x4C},
	{0x02, 0x57},
	{0x02, 0x63},
	{0x02, 0x6E},
	{0x02, 0x79},
	{0x02, 0x85},
	{0x02, 0x90},
	{0x02, 0x9C},
	{0x02, 0xA7},
	{0x02, 0xB2},
	{0x02, 0xBE},
	{0x02, 0xC9},
	{0x02, 0xD5},
	{0x02, 0xE0},
	{0x02, 0xEB},
	{0x02, 0xF7},
	{0x03, 0x02},
	{0x03, 0x0E},
	{0x03, 0x19},
	{0x03, 0x25},
	{0x03, 0x30},
	{0x03, 0x3B},
	{0x03, 0x47},
	{0x03, 0x52},
	{0x03, 0x5E},
	{0x03, 0x69},
	{0x03, 0x74},
	{0x03, 0x80},
	{0x03, 0x8B},
	{0x03, 0x97},
	{0x03, 0xA2},
	{0x03, 0xAD},
	{0x03, 0xB9},
	{0x03, 0xC4},
	{0x03, 0xD0},
	{0x03, 0xDB},
	{0x03, 0xE7},
	{0x03, 0xF2},
	{0x03, 0xFD},
	{0x04, 0x09},
	{0x04, 0x14},
	{0x04, 0x20},
	{0x04, 0x2B},
	{0x04, 0x36},
	{0x04, 0x42},
	{0x04, 0x4D},
	{0x04, 0x59},
	{0x04, 0x64},
	{0x04, 0x6F},
	{0x04, 0x7B},
	{0x04, 0x86},
	{0x04, 0x92},
	{0x04, 0x9D},
	{0x04, 0xA9},
	{0x04, 0xB4},
	{0x04, 0xBF},
	{0x04, 0xCB},
	{0x04, 0xD6},
	{0x04, 0xE2},
	{0x04, 0xED},
	{0x04, 0xF8},
	{0x05, 0x04},
	{0x05, 0x0F},
	{0x05, 0x1B},
	{0x05, 0x26},
	{0x05, 0x32},
	{0x05, 0x3C},
	{0x05, 0x47},
	{0x05, 0x51},
	{0x05, 0x5C},
	{0x05, 0x66},
	{0x05, 0x71},
	{0x05, 0x7B},
	{0x05, 0x86},
	{0x05, 0x90},
	{0x05, 0x9B},
	{0x05, 0xA5}, /* DEFAULT */
	{0x05, 0xB0},
	{0x05, 0xBB},
	{0x05, 0xC5},
	{0x05, 0xD0},
	{0x05, 0xDA},
	{0x05, 0xE5},
	{0x05, 0xEF},
	{0x05, 0xFA},
	{0x06, 0x04},
	{0x06, 0x0F},
	{0x06, 0x19},
	{0x06, 0x24},
	{0x06, 0x2F},
	{0x06, 0x39},
	{0x06, 0x44},
	{0x06, 0x4E},
	{0x06, 0x59},
	{0x06, 0x63},
	{0x06, 0x6E},
	{0x06, 0x78},
	{0x06, 0x83},
	{0x06, 0x8D},
	{0x06, 0x98},
	{0x06, 0xA3},
	{0x06, 0xAD},
	{0x06, 0xB8},
	{0x06, 0xC2},
	{0x06, 0xCD},
	{0x06, 0xD7},
	{0x06, 0xE2},
	{0x06, 0xEC},
	{0x06, 0xF7},
	{0x07, 0x01},
	{0x07, 0x0C},
	{0x07, 0x17},
	{0x07, 0x21},
	{0x07, 0x2C},
	{0x07, 0x36},
	{0x07, 0x41},
	{0x07, 0x4B},
	{0x07, 0x56},
	{0x07, 0x60},
	{0x07, 0x6B},
	{0x07, 0x75},
	{0x07, 0x80},
	{0x07, 0x8A},
	{0x07, 0x95},
	{0x07, 0xA0},
	{0x07, 0xAA},
	{0x07, 0xB5},
	{0x07, 0xBF},
	{0x07, 0xCA},
	{0x07, 0xD4},
	{0x07, 0xDF},
	{0x07, 0xE9},
	{0x07, 0xF4},
	{0x07, 0xFE},
	{0x08, 0x09},
	{0x08, 0x14},
	{0x08, 0x1E},
	{0x08, 0x29},
	{0x08, 0x33},
	{0x08, 0x3E},
	{0x08, 0x48},
	{0x08, 0x53},
	{0x08, 0x5D},
	{0x08, 0x68},
	{0x08, 0x72},
	{0x08, 0x7D},
	{0x08, 0x88},
	{0x08, 0x92},
	{0x08, 0x9D},
	{0x08, 0xA7},
	{0x08, 0xB2},
	{0x08, 0xBC},
	{0x08, 0xC7},
	{0x08, 0xD1},
	{0x08, 0xDC},
	{0x08, 0xE6},
	{0x08, 0xF1},
	{0x08, 0xFC},
	{0x09, 0x06},
	{0x09, 0x11},
	{0x09, 0x1B},
	{0x09, 0x26},
	{0x09, 0x30},
	{0x09, 0x3B},
	{0x09, 0x45},
	{0x09, 0x50},
	{0x09, 0x5A},
	{0x09, 0x65},
	{0x09, 0x6F},
	{0x09, 0x7A},
	{0x09, 0x85},
	{0x09, 0x8F},
	{0x09, 0x9A},
	{0x09, 0xA4},
	{0x09, 0xAF},
	{0x09, 0xB9},
	{0x09, 0xC4},
	{0x09, 0xCE},
	{0x09, 0xD9},
	{0x09, 0xE3},
	{0x09, 0xEE},
	{0x09, 0xF9},
	{0x0A, 0x03},
	{0x0A, 0x0E},
	{0x0A, 0x18},
	{0x0A, 0x23},
	{0x0A, 0x2D},
	{0x0A, 0x38},
	{0x0A, 0x42},
	{0x0A, 0x4D},
	{0x0A, 0x57},
	{0x0A, 0x62},
	{0x0A, 0x6D},
	{0x0A, 0x77},
	{0x0A, 0x82},
	{0x0A, 0x8C},
	{0x0A, 0x97},
	{0x0A, 0xA1},
	{0x0A, 0xAC},
	{0x0A, 0xB6},
	{0x0A, 0xC1},
	{0x0A, 0xCB},
	{0x0A, 0xD6},
	{0x0A, 0xE1}, /* MAX */
	{0x0A, 0xE1},
	{0x0A, 0xE1},
	{0x0A, 0xE1},
	{0x0A, 0xE1},
	{0x0A, 0xE1},
	{0x0A, 0xE1},
	{0x0A, 0xE1},
	{0x0A, 0xE1},
	{0x0A, 0xE1},
	{0x0A, 0xE1},
	{0x0A, 0xE1},
	{0x0A, 0xE1},
	{0x0A, 0xE1},
	{0x0A, 0xE1},
	{0x0A, 0xE1},
	{0x0A, 0xE1},
	{0x0A, 0xE1},
	{0x0A, 0xE1},
	{0x0A, 0xE1},
	{0x0A, 0xE1},
	{0x0A, 0xE1},
	{0x0A, 0xE1},
	{0x0A, 0xE1},
	{0x0A, 0xE1},
	{0x0A, 0xE1},
	{0x0A, 0xE1},
	{0x0A, 0xE1},
	{0x0A, 0xE1},
	{0x0A, 0xE1},
	{0x0A, 0xE1},
	{0x0A, 0xE1},
	{0x0A, 0xE1},
	{0x0A, 0xE1},
	{0x0A, 0xE1},
	{0x0A, 0xE1},
	{0x0A, 0xE1},
	{0x0A, 0xE1},
	{0x0A, 0xE1},
	{0x0A, 0xE1},
	{0x0A, 0xE1},
	{0x0A, 0xE1},
	{0x0A, 0xE1},
	{0x0A, 0xE1},
	{0x0A, 0xE1},
	{0x0A, 0xE1},
	{0x0A, 0xE1},
	{0x0A, 0xE1},
	{0x0A, 0xE1},
	{0x0A, 0xE1},
	{0x0A, 0xE1},
	{0x0E, 0xBA}, /* HBM */
};


static struct maptbl t270_maptbl[MAX_MAPTBL] = {
	[BRT_MAPTBL] = DEFINE_2D_MAPTBL(t270_brt_table, init_brightness_table, getidx_brt_table, copy_common_maptbl),
};

/* ===================================================================================== */
/* ============================== [HX83102 COMMAND TABLE] ============================== */
/* ===================================================================================== */
static u8 T270_SLEEP_OUT[] = { 0x11 };
static u8 T270_SLEEP_IN[] = { 0x10 };
static u8 T270_DISPLAY_OFF[] = { 0x28 };
static u8 T270_DISPLAY_ON[] = { 0x29 };

static u8 T270_BRIGHTNESS[] = {
	0x51,
	0x05, 0xA5,
};

static u8 T270_BRIGHTNESS_MODE[] = {
	0x53,
	0x24,
};

static u8 T270_HX83102_001[] = {
	0xB9,
	0x83, 0x10, 0x2E,
};

static u8 T270_HX83102_002[] = {
	0xE9,
	0xCD,
};

static u8 T270_HX83102_003[] = {
	0xBB,
	0x01,
};

static u8 T270_HX83102_004[] = {
	0xE9,
	0x00,
};

static u8 T270_HX83102_005[] = {
	0xBA,
	0x70, 0x03, 0xA8, 0x83, 0xF2, 0x80, 0x00, 0x0D,
};

static u8 T270_HX83102_006[] = {
	0x51,
	0x0F, 0xFF,
};

static u8 T270_HX83102_007[] = {
	0x53,
	0x24,
};

static u8 T270_HX83102_008[] = {
	0xC9,
	0x04, 0x5D, 0xC0,
};

static u8 T270_HX83102_009[] = {
	0xCE,
	0x00, 0x50, 0xF0,
};

static u8 T270_HX83102_010[] = {
	0xD2,
	0x29, 0x29,
};

static u8 T270_HX83102_011[] = {
	0xD9,
	0x00, 0x01, 0x02,
};

static u8 T270_HX83102_012[] = {
	0xD5,
	0x03, 0x02, 0x03, 0x02, 0x18, 0x18, 0x18, 0x18, 0x19, 0x19,
	0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x24, 0x24, 0x24, 0x24,
	0x18, 0x18, 0x18, 0x18, 0x01, 0x00, 0x01, 0x00, 0x07, 0x06,
	0x07, 0x06, 0x05, 0x04, 0x05, 0x04, 0x21, 0x20, 0x21, 0x20,
	0x23, 0x22, 0x23, 0x22,
};

static u8 T270_HX83102_013[] = {
	0xD6,
	0x04, 0x05, 0x04, 0x05, 0x18, 0x18, 0x18, 0x18, 0x19, 0x19,
	0x19, 0x19, 0x18, 0x18, 0x18, 0x18, 0x24, 0x24, 0x24, 0x24,
	0x19, 0x19, 0x19, 0x19, 0x06, 0x07, 0x06, 0x07, 0x00, 0x01,
	0x00, 0x01, 0x02, 0x03, 0x02, 0x03, 0x22, 0x23, 0x22, 0x23,
	0x20, 0x21, 0x20, 0x21,
};

static u8 T270_HX83102_014[] = {
	0xB4,
	0x98, 0x74, 0x01, 0x01, 0x98, 0x74, 0x68, 0x50, 0x0F, 0xA0,
	0x01, 0x58, 0x00, 0xFF, 0x00, 0xFF,
};

static u8 T270_HX83102_015[] = {
	0xD3,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0x00, 0x08, 0x08, 0x27,
	0x27, 0x22, 0x2F, 0x11, 0x11, 0x04, 0x04, 0x32, 0x10, 0x0F,
	0x00, 0x0F, 0x32, 0x10, 0x0D, 0x00, 0x0D, 0x32, 0x17, 0x9B,
	0x07, 0x9B, 0x00, 0x00, 0x21, 0x2F, 0x01, 0x00, 0x21, 0x38,
	0x01, 0x55,
};

static u8 T270_HX83102_016[] = {
	0xD1,
	0x37, 0x0C, 0xFF,
};

static u8 T270_HX83102_017[] = {
	0xB1,
	0x10, 0xFA, 0xAF, 0xAF, 0x29, 0x29, 0xB2, 0x57, 0x4D, 0x36,
	0x36, 0x36, 0x36, 0x22, 0x21, 0x15, 0x00,
};

static u8 T270_HX83102_018[] = {
	0xB2,
	0x00, 0xB0, 0x47, 0x80, 0x00, 0x14, 0x44, 0x2C,
};

static u8 T270_HX83102_019[] = {
	0xE0,
	0x00, 0x04, 0x0B, 0x11, 0x17, 0x25, 0x3D, 0x43, 0x4B, 0x48,
	0x64, 0x6C, 0x74, 0x82, 0x81, 0x88, 0x9B, 0xAE, 0xAD, 0x56,
	0x5D, 0x68, 0x73, 0x00, 0x04, 0x0B, 0x11, 0x17, 0x25, 0x3D,
	0x43, 0x4B, 0x48, 0x64, 0x6C, 0x74, 0x89, 0x8A, 0x99, 0x9B,
	0xAE, 0xAD, 0x56, 0x5D, 0x68, 0x73,
};

static u8 T270_HX83102_020[] = {
	0xC0,
	0x23, 0x23, 0x22, 0x11, 0xA2, 0x17, 0x00, 0x80, 0x00, 0x00,
	0x08, 0x00, 0x63, 0x63,
};

static u8 T270_HX83102_021[] = {
	0xCC,
	0x02,
};

static u8 T270_HX83102_022[] = {
	0xC8,
	0x00, 0x04, 0x04, 0x00, 0x00, 0x82,
};

static u8 T270_HX83102_023[] = {
	0xBF,
	0xFC, 0x85, 0x80,
};

static u8 T270_HX83102_024[] = {
	0xD0,
	0x07, 0x04, 0x05,
};

static u8 T270_HX83102_025[] = {
	0xBD,
	0x01,
};

static u8 T270_HX83102_026[] = {
	0xD3,
	0x01, 0x00, 0xFC, 0x00, 0x00, 0x11, 0x10, 0x00, 0x0E,
};

static u8 T270_HX83102_027[] = {
	0xBD,
	0x02,
};

static u8 T270_HX83102_028[] = {
	0xB4,
	0x4E,
};

static u8 T270_HX83102_029[] = {
	0xBF,
	0xF2,
};

static u8 T270_HX83102_030[] = {
	0xD8,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xF0,
};

static u8 T270_HX83102_031[] = {
	0xBD,
	0x00,
};

static u8 T270_HX83102_032[] = {
	0xE7,
	0x12, 0x13, 0x02, 0x02, 0x2B, 0x2B, 0x0E, 0x0E, 0x00, 0x14,
	0x28, 0x79, 0x1A, 0x78, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x17, 0x00,
};

static u8 T270_HX83102_033[] = {
	0xBD,
	0x01,
};

static u8 T270_HX83102_034[] = {
	0xE7,
	0x02, 0x24, 0x01, 0x8F, 0x0D, 0xB2, 0x0E,
};

static u8 T270_HX83102_035[] = {
	0xBD,
	0x02,
};

static u8 T270_HX83102_036[] = {
	0xE7,
	0xFF, 0x01, 0xFD, 0x01, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x81, 0x00, 0x02, 0x40,
};

static u8 T270_HX83102_037[] = {
	0xBD,
	0x00,
};

static u8 T270_HX83102_038[] = {
	0xC1,
	0x01,
};

static u8 T270_HX83102_039[] = {
	0xBD,
	0x01,
};

static u8 T270_HX83102_040[] = {
	0xC1,
	0x00, 0x04, 0x07, 0x0B, 0x0F, 0x12, 0x16, 0x19, 0x1D, 0x21,
	0x24, 0x28, 0x2B, 0x2E, 0x31, 0x35, 0x38, 0x3C, 0x3F, 0x43,
	0x49, 0x50, 0x57, 0x5F, 0x66, 0x6D, 0x75, 0x7D, 0x84, 0x8C,
	0x94, 0x9D, 0xA4, 0xAD, 0xB5, 0xBD, 0xC6, 0xCF, 0xD8, 0xE0,
	0xEA, 0xEE, 0xF1, 0xF3, 0xF5, 0xF7, 0x0F, 0xA7, 0x98, 0xBC,
	0xDC, 0xAC, 0x78, 0xEC, 0xCA, 0x43, 0x61, 0x80,
};

static u8 T270_HX83102_041[] = {
	0xBD,
	0x02,
};

static u8 T270_HX83102_042[] = {
	0xC1,
	0x00, 0x04, 0x07, 0x0B, 0x0F, 0x12, 0x16, 0x1A, 0x1E, 0x21,
	0x25, 0x28, 0x2C, 0x2F, 0x32, 0x36, 0x3A, 0x3D, 0x41, 0x44,
	0x4A, 0x52, 0x59, 0x60, 0x68, 0x6F, 0x77, 0x7F, 0x87, 0x8F,
	0x97, 0x9F, 0xA7, 0xB0, 0xB8, 0xC0, 0xC9, 0xD2, 0xDB, 0xE4,
	0xED, 0xF2, 0xF4, 0xF7, 0xF9, 0xFB, 0x0F, 0xFD, 0x36, 0x69,
	0x21, 0xCA, 0x39, 0x05, 0x81, 0x91, 0x9D, 0x80,
};

static u8 T270_HX83102_043[] = {
	0xBD,
	0x03,
};

static u8 T270_HX83102_044[] = {
	0xC1,
	0x00, 0x04, 0x07, 0x0C, 0x10, 0x13, 0x17, 0x1B, 0x1F, 0x22,
	0x26, 0x29, 0x2D, 0x30, 0x33, 0x37, 0x3B, 0x3E, 0x42, 0x45,
	0x4C, 0x53, 0x5B, 0x62, 0x6A, 0x71, 0x79, 0x81, 0x88, 0x91,
	0x99, 0xA1, 0xA9, 0xB2, 0xB9, 0xC2, 0xCB, 0xD4, 0xDC, 0xE6,
	0xF0, 0xF5, 0xF7, 0xFA, 0xFD, 0xFF, 0x0C, 0x28, 0x33, 0x1A,
	0x76, 0x72, 0x24, 0xC5, 0x4C, 0x8D, 0x0E, 0x80,
};

static u8 T270_HX83102_045[] = {
	0xBD,
	0x00,
};

static u8 T270_HX83102_046[] = {
	0x55,
	0x01,
};

static u8 T270_HX83102_047[] = {
	0xE4,
	0x2D, 0x41, 0x2C, 0x99, 0xBF, 0xE6, 0x0C, 0x33, 0x66, 0x99,
	0xCC, 0xFF, 0xEA, 0xFF, 0x03, 0x1E, 0x1E, 0x1E, 0x1E, 0x00,
	0x00, 0x05, 0x01, 0x14,
};

static u8 T270_HX83102_048[] = {
	0xBD,
	0x01,
};

static u8 T270_HX83102_049[] = {
	0xE4,
	0xE1, 0xE1, 0xE1, 0xE1, 0xE1, 0xE1, 0xE1, 0xE1, 0xC7, 0xB2,
	0xA0, 0x90, 0x81, 0x75, 0x69, 0x5F, 0x55, 0x4C, 0x44, 0x3D,
	0x36, 0x2E, 0x29, 0x21, 0x1B, 0x15, 0x10, 0x0D, 0x0C, 0x0C,
	0x0C, 0x54, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
};

static u8 T270_HX83102_050[] = {
	0xBD,
	0x00,
};

static u8 T270_HX83102_051[] = {
	0xB9,
	0x00, 0x00, 0x00,
};

static DEFINE_STATIC_PACKET(t270_sleep_out, DSI_PKT_TYPE_WR, T270_SLEEP_OUT, 0);
static DEFINE_STATIC_PACKET(t270_sleep_in, DSI_PKT_TYPE_WR, T270_SLEEP_IN, 0);
static DEFINE_STATIC_PACKET(t270_display_on, DSI_PKT_TYPE_WR, T270_DISPLAY_ON, 0);
static DEFINE_STATIC_PACKET(t270_display_off, DSI_PKT_TYPE_WR, T270_DISPLAY_OFF, 0);
static DEFINE_STATIC_PACKET(t270_brightness_mode, DSI_PKT_TYPE_WR, T270_BRIGHTNESS_MODE, 0);

static DEFINE_PKTUI(t270_brightness, &t270_maptbl[BRT_MAPTBL], 1);
static DEFINE_VARIABLE_PACKET(t270_brightness, DSI_PKT_TYPE_WR, T270_BRIGHTNESS, 0);

static DEFINE_STATIC_PACKET(t270_hx83102_001, DSI_PKT_TYPE_WR, T270_HX83102_001, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_002, DSI_PKT_TYPE_WR, T270_HX83102_002, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_003, DSI_PKT_TYPE_WR, T270_HX83102_003, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_004, DSI_PKT_TYPE_WR, T270_HX83102_004, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_005, DSI_PKT_TYPE_WR, T270_HX83102_005, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_006, DSI_PKT_TYPE_WR, T270_HX83102_006, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_007, DSI_PKT_TYPE_WR, T270_HX83102_007, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_008, DSI_PKT_TYPE_WR, T270_HX83102_008, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_009, DSI_PKT_TYPE_WR, T270_HX83102_009, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_010, DSI_PKT_TYPE_WR, T270_HX83102_010, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_011, DSI_PKT_TYPE_WR, T270_HX83102_011, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_012, DSI_PKT_TYPE_WR, T270_HX83102_012, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_013, DSI_PKT_TYPE_WR, T270_HX83102_013, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_014, DSI_PKT_TYPE_WR, T270_HX83102_014, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_015, DSI_PKT_TYPE_WR, T270_HX83102_015, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_016, DSI_PKT_TYPE_WR, T270_HX83102_016, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_017, DSI_PKT_TYPE_WR, T270_HX83102_017, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_018, DSI_PKT_TYPE_WR, T270_HX83102_018, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_019, DSI_PKT_TYPE_WR, T270_HX83102_019, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_020, DSI_PKT_TYPE_WR, T270_HX83102_020, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_021, DSI_PKT_TYPE_WR, T270_HX83102_021, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_022, DSI_PKT_TYPE_WR, T270_HX83102_022, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_023, DSI_PKT_TYPE_WR, T270_HX83102_023, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_024, DSI_PKT_TYPE_WR, T270_HX83102_024, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_025, DSI_PKT_TYPE_WR, T270_HX83102_025, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_026, DSI_PKT_TYPE_WR, T270_HX83102_026, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_027, DSI_PKT_TYPE_WR, T270_HX83102_027, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_028, DSI_PKT_TYPE_WR, T270_HX83102_028, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_029, DSI_PKT_TYPE_WR, T270_HX83102_029, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_030, DSI_PKT_TYPE_WR, T270_HX83102_030, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_031, DSI_PKT_TYPE_WR, T270_HX83102_031, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_032, DSI_PKT_TYPE_WR, T270_HX83102_032, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_033, DSI_PKT_TYPE_WR, T270_HX83102_033, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_034, DSI_PKT_TYPE_WR, T270_HX83102_034, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_035, DSI_PKT_TYPE_WR, T270_HX83102_035, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_036, DSI_PKT_TYPE_WR, T270_HX83102_036, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_037, DSI_PKT_TYPE_WR, T270_HX83102_037, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_038, DSI_PKT_TYPE_WR, T270_HX83102_038, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_039, DSI_PKT_TYPE_WR, T270_HX83102_039, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_040, DSI_PKT_TYPE_WR, T270_HX83102_040, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_041, DSI_PKT_TYPE_WR, T270_HX83102_041, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_042, DSI_PKT_TYPE_WR, T270_HX83102_042, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_043, DSI_PKT_TYPE_WR, T270_HX83102_043, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_044, DSI_PKT_TYPE_WR, T270_HX83102_044, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_045, DSI_PKT_TYPE_WR, T270_HX83102_045, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_046, DSI_PKT_TYPE_WR, T270_HX83102_046, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_047, DSI_PKT_TYPE_WR, T270_HX83102_047, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_048, DSI_PKT_TYPE_WR, T270_HX83102_048, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_049, DSI_PKT_TYPE_WR, T270_HX83102_049, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_050, DSI_PKT_TYPE_WR, T270_HX83102_050, 0);
static DEFINE_STATIC_PACKET(t270_hx83102_051, DSI_PKT_TYPE_WR, T270_HX83102_051, 0);

static DEFINE_PANEL_MDELAY(t270_wait_display_off, 1 * 17); /* 1 frame */
static DEFINE_PANEL_MDELAY(t270_wait_120msec, 120);
static DEFINE_PANEL_MDELAY(t270_wait_50msec, 50);
#if 0
static DEFINE_PANEL_MDELAY(t270_wait_blic_off, 1);
#endif

static void *t270_init_cmdtbl[] = {
	&hx83102_restbl[RES_ID],
	&PKTINFO(t270_hx83102_001),
	&PKTINFO(t270_hx83102_002),
	&PKTINFO(t270_hx83102_003),
	&PKTINFO(t270_hx83102_004),
	&PKTINFO(t270_hx83102_005),
	&PKTINFO(t270_hx83102_006),
	&PKTINFO(t270_hx83102_007),
	&PKTINFO(t270_hx83102_008),
	&PKTINFO(t270_hx83102_009),
	&PKTINFO(t270_hx83102_010),
	&PKTINFO(t270_hx83102_011),
	&PKTINFO(t270_hx83102_012),
	&PKTINFO(t270_hx83102_013),
	&PKTINFO(t270_hx83102_014),
	&PKTINFO(t270_hx83102_015),
	&PKTINFO(t270_hx83102_016),
	&PKTINFO(t270_hx83102_017),
	&PKTINFO(t270_hx83102_018),
	&PKTINFO(t270_hx83102_019),
	&PKTINFO(t270_hx83102_020),
	&PKTINFO(t270_hx83102_021),
	&PKTINFO(t270_hx83102_022),
	&PKTINFO(t270_hx83102_023),
	&PKTINFO(t270_hx83102_024),
	&PKTINFO(t270_hx83102_025),
	&PKTINFO(t270_hx83102_026),
	&PKTINFO(t270_hx83102_027),
	&PKTINFO(t270_hx83102_028),
	&PKTINFO(t270_hx83102_029),
	&PKTINFO(t270_hx83102_030),
	&PKTINFO(t270_hx83102_031),
	&PKTINFO(t270_hx83102_032),
	&PKTINFO(t270_hx83102_033),
	&PKTINFO(t270_hx83102_034),
	&PKTINFO(t270_hx83102_035),
	&PKTINFO(t270_hx83102_036),
	&PKTINFO(t270_hx83102_037),
	&PKTINFO(t270_hx83102_038),
	&PKTINFO(t270_hx83102_039),
	&PKTINFO(t270_hx83102_040),
	&PKTINFO(t270_hx83102_041),
	&PKTINFO(t270_hx83102_042),
	&PKTINFO(t270_hx83102_043),
	&PKTINFO(t270_hx83102_044),
	&PKTINFO(t270_hx83102_045),
	&PKTINFO(t270_hx83102_046),
	&PKTINFO(t270_hx83102_047),
	&PKTINFO(t270_hx83102_048),
	&PKTINFO(t270_hx83102_049),
	&PKTINFO(t270_hx83102_050),
	&PKTINFO(t270_hx83102_051),
	&PKTINFO(t270_sleep_out),
	&DLYINFO(t270_wait_120msec),
};

static void *t270_res_init_cmdtbl[] = {
	&hx83102_restbl[RES_ID],
};

static void *t270_set_bl_cmdtbl[] = {
	&PKTINFO(t270_brightness), //51h
};

static void *t270_display_on_cmdtbl[] = {
	&PKTINFO(t270_display_on),
	&DLYINFO(t270_wait_50msec),
	&PKTINFO(t270_brightness_mode),
};

static void *t270_display_off_cmdtbl[] = {
	&PKTINFO(t270_display_off),
};

static void *t270_exit_cmdtbl[] = {
	&PKTINFO(t270_sleep_in),
};


/* ===================================================================================== */
/* ================================= [EA8076 I2C TABLE] ===========+++================= */
/* ===================================================================================== */
static u8 HX83102_T270_I2C_INIT[] = {
	0x04, 0x00,
	0x05, 0xB7,
	0x06, 0x08,
	0x08, 0x08,
	0x09, 0x08,
	0x0D, 0xB4,
};

static u8 HX83102_T270_I2C_EXIT_VSP[] = {
	0x05, 0x20,
};

static DEFINE_STATIC_PACKET(hx83102_t270_i2c_init, I2C_PKT_TYPE_WR, HX83102_T270_I2C_INIT, 0);
static DEFINE_STATIC_PACKET(hx83102_t270_i2c_exit_vsp, I2C_PKT_TYPE_WR, HX83102_T270_I2C_EXIT_VSP, 0);
static DEFINE_STATIC_PACKET(hx83102_t270_i2c_dump, I2C_PKT_TYPE_RD, HX83102_T270_I2C_INIT, 0);

static void *hx83102_t270_init_cmdtbl[] = {
	&PKTINFO(hx83102_t270_i2c_init),
};

static void *hx83102_t270_exit_cmdtbl[] = {
	&PKTINFO(hx83102_t270_i2c_exit_vsp),
};

static void *hx83102_t270_dump_cmdtbl[] = {
	&PKTINFO(hx83102_t270_i2c_dump),
};

static struct seqinfo t270_seqtbl[MAX_PANEL_SEQ] = {
	[PANEL_INIT_SEQ] = SEQINFO_INIT("init-seq", t270_init_cmdtbl),
	[PANEL_RES_INIT_SEQ] = SEQINFO_INIT("resource-init-seq", t270_res_init_cmdtbl),
	[PANEL_SET_BL_SEQ] = SEQINFO_INIT("set-bl-seq", t270_set_bl_cmdtbl),
	[PANEL_DISPLAY_ON_SEQ] = SEQINFO_INIT("display-on-seq", t270_display_on_cmdtbl),
	[PANEL_DISPLAY_OFF_SEQ] = SEQINFO_INIT("display-off-seq", t270_display_off_cmdtbl),
	[PANEL_EXIT_SEQ] = SEQINFO_INIT("exit-seq", t270_exit_cmdtbl),

#ifdef CONFIG_SUPPORT_I2C
	[PANEL_I2C_INIT_SEQ] = SEQINFO_INIT("i2c-init-seq", hx83102_t270_init_cmdtbl),
	[PANEL_I2C_EXIT_SEQ] = SEQINFO_INIT("i2c-exit-seq", hx83102_t270_exit_cmdtbl),
	[PANEL_I2C_DUMP_SEQ] = SEQINFO_INIT("i2c-dump-seq", hx83102_t270_dump_cmdtbl),
#endif

};

struct common_panel_info hx83102_t270_default_panel_info = {
	.ldi_name = "hx83102",
	.name = "hx83102_t270_default",
	.model = "BOE_7_45_inch",
	.vendor = "BOE",
	.id = 0x856270,
	.rev = 0,
	.ddi_props = {
		.gpara = 0,
		.err_fg_recovery = false,
		.init_seq_by_lpdt = true,
		.delay_cmd = 0x00,
		.delay_duration = 1,
	},
	.mres = {
		.nr_resol = ARRAY_SIZE(hx83102_t270_resol),
		.resol = hx83102_t270_resol,
	},
	.maptbl = t270_maptbl,
	.nr_maptbl = ARRAY_SIZE(t270_maptbl),
	.seqtbl = t270_seqtbl,
	.nr_seqtbl = ARRAY_SIZE(t270_seqtbl),
	.rditbl = hx83102_rditbl,
	.nr_rditbl = ARRAY_SIZE(hx83102_rditbl),
	.restbl = hx83102_restbl,
	.nr_restbl = ARRAY_SIZE(hx83102_restbl),
	.dumpinfo = NULL,
	.nr_dumpinfo = 0,
	.panel_dim_info = {
		&hx83102_t270_panel_dimming_info,
	},
	.i2c_data = &hx83102_t270_i2c_data,
};

#define __XX_DBV2REG_BIT_SHIFT(__XX)	\
__XX(51H_PARA1,	__XX_FROM(11:8),	__XX_TO(3:0)	)	\
__XX(51H_PARA2,	__XX_FROM(7:0),	__XX_TO(7:0)	)	\

__XX_DBV2REG_INIT(__XX_DBV2REG_BIT_SHIFT);
#undef __XX_DBV2REG_BIT_SHIFT

static int __init hx83102_t270_panel_init(void)
{
	__XX_DBV2REG_BRIGHTNESS_INIT(hx83102_t270_default_panel_info, __XX_DBV2REG_BIT_SHIFT_INIT, NULL);

	register_common_panel(&hx83102_t270_default_panel_info);

	return 0;
}
arch_initcall(hx83102_t270_panel_init)
#endif /* __HX83102_T270_PANEL_H__ */


